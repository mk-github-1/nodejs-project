back-end(TypeORM + Express.js + mysql環境)の準備方法

■ グローバルにtypeormをインストール
npm install -g typeorm

■ フォルダに移動
cd vscode-workspace/nodejs-project

■ back-endプロジェクトの自動生成
これをすることでtypeorm + express.js + mysqlのプロジェクトを自動生成できる
npx typeorm init --name back-end --database mysql --express

■ 依存関係のmysqlを修正する
依存関係のmysqlはmysql Version8に対応していないのでそのままでは動作しない、mysql2に変更が必要

cd back-end
①npm uninstall mysql
②npm install mysql2

■ src/data-source.tsの設定を変更する
import "reflect-metadata"
import { DataSource } from "typeorm"
import { User } from "./entity/User"

export const AppDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    // 開発環境のDBの設定をする
    username: "root",
    password: "0000",
    database: "test_db",
    synchronize: true,
    logging: false,
    entities: [User],
    migrations: [],
    subscribers: [],
})


■ migrationの実行

1. DB定義があるファイルの差分を作成
(公式手順) typeorm migration:generate -d <path/to/datasource> path/to/migrations/<migration-name>
→ (訂正) npm run typeorm migration:generate -- --dataSource src/data-source.ts src/migrations/InitialSchema

※ --pretty src/migrations/InitialSchemaの--prettyがなくても同じ動作

2. migrationを実行(DBテーブルに反映)　※指定なしだと最新のマイグレーションファイルが指定されるっぽい
(公式手順) typeorm migration:run -- -d path-to-datasource-config
→ (訂正) npm run typeorm migration:run -- --dataSource src/data-source.ts 

3. 差分を更新したい時、再度1.2を実行


※ 戻す？
(公式手順) typeorm migration:run --fake
→ (訂正) npm run typeorm migration:run --fake -- --dataSource src/data-source.ts

npx typeorm schema:drop

※ DB定義がある空ファイルを作成
(公式手順) typeorm migration:create ./path-to-migrations-dir/PostRefactoring
→ (訂正) npm run typeorm migration:create --name src/migrations/InitialSchema


■ ライブラリ説明
helmet: セキュリティ、脆弱性対策？
cors: CORSの利用と思われる
rimraf: 出力ディレクトリを毎回削除
eslint: コードフォーマット
prettier eslint-config-prettier: バグ検出

